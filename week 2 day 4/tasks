-- Database: demo

-- DROP DATABASE IF EXISTS demo;

CREATE DATABASE demo
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'English_India.1252'
    LC_CTYPE = 'English_India.1252'
    LOCALE_PROVIDER = 'libc'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False; 

DROP PROCEDURE encrypt_plaintext(text)
/*
1. Create a stored procedure to encrypt a given text
Task: Write a stored procedure sp_encrypt_text that takes a plain text input (e.g., email or mobile number) and returns an encrypted version using PostgreSQL's pgcrypto extension.
 
Use pgp_sym_encrypt(text, key) from pgcrypto
*/
create or replace procedure encrypt_plaintext(IN input_password text,out encrypted_password bytea)
language plpgsql
as $$
begin
select pgp_sym_encrypt(input_password,'secrectsymkey') into encrypted_password;
end;
$$;

do $$
declare 
	input_password text := 'my_secrect_password';
	encrypted_password bytea;
begin
call encrypt_plaintext(input_password,encrypted_password);
raise notice 'Encrypted password : %',encrypted_password;
end;
$$;
/*
2. Create a stored procedure to compare two encrypted texts
Task: Write a procedure sp_compare_encrypted that takes two encrypted values and checks if they decrypt to the same plain text.
*/
create or replace procedure does_decrypt_similar(in password1 bytea,in password2 bytea,out bool_val bool)
language plpgsql
as $$
declare 
	text1_decrypt_data text;
	text2_decrypt_data text;
begin
	select pgp_sym_decrypt(password1,'secrectsymkey') into text1_decrypt_data;
	select pgp_sym_decrypt(password2,'secrectsymkey') into text2_decrypt_data;
	if( text1_decrypt_data = text2_decrypt_data) then
	bool_val :=  true;
	else
	bool_val := false;
	end if;
end;
$$;
do
$$
declare
	password1 bytea;
	password2 bytea;
	compare_result bool;
begin
	call encrypt_plaintext( cast('my_password' as text),password1);
	call encrypt_plaintext(cast('my_password'as text),password2);
	call does_decrypt_similar(password1,password2,compare_result);
	raise notice 'Are both similar : %',compare_result;
end;
$$;
/*
3. Create a stored procedure to partially mask a given text
Task: Write a procedure sp_mask_text that:
 
Shows only the first 2 and last 2 characters of the input string
 
Masks the rest with *
 
E.g., input: 'john.doe@example.com' → output: 'jo***************om'
*/
create or replace procedure mask_text(in input_text text,out masked_text text) 
language plpgsql
as $$
begin

select left(input_text,2) || repeat('*',length(input_text)-4) || right(input_text,2) into masked_text;

end;
$$;
do
$$
declare
	email text := 'pradeep@gmail.com';
	masked_email text;
begin
	call mask_text(email,masked_email);
	raise notice 'Masked Email : %',masked_email;
end;
$$;
/*
4. Create a procedure to insert into customer with encrypted email and masked name
Task:
 
Call sp_encrypt_text for email
 
Call sp_mask_text for first_name
 
Insert masked and encrypted values into the customer table
 
Use any valid address_id and store_id to satisfy FK constraints.
*/
drop table customer;
create table customer(
cust_id serial primary key,  
encrypted_email bytea,
masked_name text
);
create or replace procedure insert_safe_data(in email text,in cust_name text) 
language plpgsql
as $$
declare
	processed_name text;
	processed_email bytea;
begin
	call encrypt_plaintext(email,processed_email);
	call mask_text(cust_name,processed_name);
	insert into customer(encrypted_email,masked_name) values (processed_email,processed_name);
end;
$$;

do
$$
begin
call insert_safe_data(cast('pradeepsn@gmail.com' as text),cast('pradeep' as text));
end;
$$;
select * from customer;
/*
5. Create a procedure to fetch and display masked first_name and decrypted email for all customers
Task:
Write sp_read_customer_masked() that:
 
Loops through all rows
 
Decrypts email
 
Displays customer_id, masked first name, and decrypted email
*/
create or replace procedure sp_read_customer_masked()
language plpgsql
as $$
declare 
	rec record;
	decrypted_cur_email text;
	encrypted_cur_email bytea;
	masked_cur_name text;
	cur cursor for select * from customer;
begin
	open cur;
	loop
		fetch cur into rec;
		exit when not found;
		encrypted_cur_email = rec.encrypted_email;
		masked_cur_name = rec.masked_name;
		select pgp_sym_decrypt(encrypted_cur_email,'secrectsymkey') into decrypted_cur_email;
		raise notice 'Email : % Name : %',decrypted_cur_email,masked_cur_name;
	end loop;
	
	close cur;
	
end;
$$;
call sp_read_customer_masked();